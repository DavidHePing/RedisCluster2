version: '3.7'

networks:
  outside:
    external:
      name: "host"

services:
  redis-node1:
    image: "$ImageName"
    ports:
      - "7001:7001"
      - "17001:17001"
    entrypoint: [redis-server, /etc/redis/rediscluster.conf,--port,"7001",--cluster-announce-bus-port,"17001",--cluster-announce-ip,"$ip"]
    deploy:
      # container count
      replicas: 1
      update_config:
        # update container count in once time
        parallelism: 1 
        order: start-first
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 30s
  redis-node2:
    image: "$ImageName"
    ports:
      - "7002:7002"
      - "17002:17002"
    entrypoint: [redis-server, /etc/redis/rediscluster.conf,--port,"7002",--cluster-announce-bus-port,"17002",--cluster-announce-ip,"$ip"]
    deploy:
      # container count
      replicas: 1
      update_config:
        # update container count in once time
        parallelism: 1 
        order: start-first
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 30s
  redis-node3:
    image: "$ImageName"
    ports:
      - "7003:7003"
      - "17003:17003"
    entrypoint: [redis-server, /etc/redis/rediscluster.conf,--port,"7003",--cluster-announce-bus-port,"17003",--cluster-announce-ip,"$ip"]
    deploy:
      # container count
      replicas: 1
      update_config:
        # update container count in once time
        parallelism: 1 
        order: start-first
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 30s
  redis-node4:
    image: "$ImageName"
    ports:
      - "7004:7004"
      - "17004:17004"
    entrypoint: [redis-server, /etc/redis/rediscluster.conf,--port,"7004",--cluster-announce-bus-port,"17004",--cluster-announce-ip,"$ip"]
    deploy:
      # container count
      replicas: 1
      update_config:
        # update container count in once time
        parallelism: 1 
        order: start-first
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 30s
    depends_on:
      - redis-node1
      - redis-node2
      - redis-node3
  redis-node5:
    image: "$ImageName"
    ports:
      - "7005:7005"
      - "17005:17005"   
    entrypoint: [redis-server, /etc/redis/rediscluster.conf,--port,"7005",--cluster-announce-bus-port,"17005",--cluster-announce-ip,"$ip"]
    deploy:
      # container count
      replicas: 1
      update_config:
        # update container count in once time
        parallelism: 1 
        order: start-first
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 30s
    depends_on:
      - redis-node1
      - redis-node2
      - redis-node3 
  redis-node6:
    image: "$ImageName"
    ports:
      - "7006:7006"
      - "17006:17006"   
    entrypoint: [redis-server, /etc/redis/rediscluster.conf, --port,"7006",--cluster-announce-bus-port,"17006",--cluster-announce-ip,"$ip"]    
    deploy:
      # container count
      replicas: 1
      update_config:
        # update container count in once time
        parallelism: 1 
        order: start-first
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 30s
    depends_on:
      - redis-node1
      - redis-node2
      - redis-node3
  # redis-cluster-creator:
  #   image: redis    
  #   entrypoint: [/bin/sh,-c,'echo "yes" | redis-cli --cluster create "$ip":7001 "$ip":7002 "$ip":7003 "$ip":7004 "$ip":7005 "$ip":7006 --cluster-replicas 1']
  #   deploy:
  #     # container count
  #     replicas: 1
  #     update_config:
  #       # update container count in once time
  #       parallelism: 1 
  #       order: start-first
  #       failure_action: rollback
  #       delay: 10s
  #     restart_policy:
  #       condition: any
  #       delay: 5s
  #       max_attempts: 3
  #       window: 30s
  #   depends_on:
  #     - redis-node1
  #     - redis-node2
  #     - redis-node3
  #     - redis-node4
  #     - redis-node5
  #     - redis-node6